# Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
# The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
# You must write an algorithm that runs in O(n) time and without using the division operation.

# Example 1:
# Input: nums = [1,2,3,4]
# Output: [24,12,8,6]

# Example 2:
# Input: nums = [-1,1,0,-3,3]
# Output: [0,0,9,0,0]

def productExceptSelf(nums):
    answer = []

    if len(nums) == 0:
        return answer

    for ind in range(len(nums)):
        temp_nums = nums[:]
        temp_nums.pop(ind)
        total = 1
        for number in temp_nums:
            total *= number
        answer.append(total)
    return answer

def improvedproductExceptSelf(nums):
    answer = []
    total = 1

    for num in nums:
        answer.append(total)
        total *= num

    total = 1
    for ind in range(len(nums)):
        answer[-ind - 1] *= total
        total *= nums[-ind - 1]

    return answer

questions = ([1, 2, 3, 4], [-1, 1, 0, -3, 3])
answers = ([24, 12, 8, 6], [0, 0, 9, 0, 0])

for i in range(len(questions)):
    print(f'Question {i + 1}: {questions[i]} | Answer: {answers[i]}')
    print(f'My Answer: {improvedproductExceptSelf(questions[i])}')
